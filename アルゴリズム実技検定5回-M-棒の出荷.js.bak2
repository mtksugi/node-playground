/*
https://atcoder.jp/contests/past202012-open/tasks/past202012_m

ex. 1
5 10
3 4 1 2 4

ex. 2
8 10
7 2 1 5 3 2 5 2

ex. 3
13 10000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000

とりあえず解説にあるdpの考えはよくわからないが、2分探索はわかるのでやってみる

答えを2分探索する.  
判定条件はa以上b以下を満たす（最大の）xが存在するかどうか.  （←”最大の”は上限を条件に切っていくということ）

下限であるaを外側で2分探索しつつ、
...ex. 1なら
1回目: 5～L→ok
2回目: 8～L→NG
3回目: 6～7→ok
4回目: 7→ok

上限もLから半減させていく
...ex. 1の5～Lのときに
1回目: 5～L→NG
2回目: 5～L/2→NG
3回目: 5～L/4→OK


こうすれば少なくともO(log(N)*log(L))になるはず
*/

const inputStr = `13 10000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000`

let inputArray = inputStr.split('\n')

let line1 = inputArray.shift()
const N = parseInt(line1.split(' ')[0])
const L = parseInt(line1.split(' ')[1])
line1 = inputArray.shift()

const A = line1.split(' ').map(n => parseInt(n))

console.log('N', N);
console.log('L', L);
console.log('A', A);


const check = (min) => {
  let le = L
  let ok = false

  while (true) {
    
    let ll = 0
    for (let j = 0; j < A.length; j++) {
      
      if (ll + A[j] >= le ) {
        ll = 0
      }
      ll += A[j]
      if (ll >= min ) {
        ok = true
      } else {
        ok = false
      }
    }
    if (ok) break
    if (min + 1 >= le) break

    le = Math.floor((min + le) / 2)
  }
  return ok
}

let s = 0
let e = L + 1
let a = 0
while (true) {
  let mid = Math.floor((s + e) / 2)
  if (check(mid)) {
    s = mid
  } else {
    e = mid
  }
  if (s + 1 === e) {
    a = s
    break
  }
}




console.log('答え:', a);
